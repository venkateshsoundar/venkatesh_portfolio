name: Keep Streamlit Awake

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes UTC
  workflow_dispatch:

concurrency:
  group: keep-streamlit-awake
  cancel-in-progress: true

jobs:
  wake:
    runs-on: ubuntu-latest
    timeout-minutes: 6

    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm init -y
          npm install playwright
          npx playwright install --with-deps chromium

      - name: Wake only if sleeping
        env:
          APP_URL: "https://venkateshbalu.streamlit.app/?keepalive=${{ github.run_id }}"
        run: |
          node - <<'NODE'
          const { chromium } = require('playwright');

          (async () => {
            const browser = await chromium.launch({
              args: ['--no-sandbox', '--disable-dev-shm-usage']
            });
            const page = await browser.newPage();

            // Be a bit patient on first paint
            await page.goto(process.env.APP_URL, { waitUntil: 'domcontentloaded', timeout: 90000 });

            const isAwake = async () =>
              (await page.locator('div[data-testid="stAppViewContainer"], div.stApp').count()) > 0;

            if (await isAwake()) {
              console.log('‚úÖ App already awake. Nothing to do.');
              await browser.close();
              process.exit(0);
            }

            // Exact button from your screenshot
            const exactBtn = page.locator('button:has-text("Yes, get this app back up!")').first();
            let clicked = false;

            if (await exactBtn.count()) {
              console.log('üí§ Sleeping screen detected. Clicking exact wake button‚Ä¶');
              await exactBtn.click({ timeout: 30000 });
              clicked = true;
            } else {
              // Fallbacks just in case Streamlit wording changes
              const patterns = [/wake up/i, /wake/i, /start app/i, /resume/i, /launch/i];
              for (const re of patterns) {
                const btn = page.getByRole('button', { name: re }).first();
                if (await btn.count()) {
                  console.log('üí§ Sleeping screen detected. Clicking:', re);
                  await btn.click({ timeout: 30000 });
                  clicked = true;
                  break;
                }
              }
            }

            if (!clicked) {
              console.log('‚ÑπÔ∏è No wake button found. Maybe already starting.');
              await browser.close();
              process.exit(0);
            }

            // Let the app boot: wait for network idle and poll for Streamlit root
            try { await page.waitForLoadState('networkidle', { timeout: 60000 }); } catch (_) {}
            const deadline = Date.now() + 120000; // up to 2 minutes total
            while (Date.now() < deadline && !(await isAwake())) {
              await page.waitForTimeout(1500);
            }

            if (await isAwake()) {
              console.log('üöÄ App woke successfully.');
            } else {
              console.log('‚ö†Ô∏è Wake clicked but app not fully ready yet; will retry next run.');
            }

            await browser.close();
            process.exit(0);
          })().catch(err => { console.error(err?.stack || err); process.exit(1); });
          NODE
