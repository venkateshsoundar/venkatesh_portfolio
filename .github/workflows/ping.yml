name: Keep Streamlit Awake

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes (UTC)
  workflow_dispatch:

jobs:
  wake:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm init -y >/dev/null 2>&1
          npm i playwright
          npx playwright install --with-deps chromium

      - name: Visit app and click Wake Up if needed
        env:
          APP_URL: "https://venkateshbalu.streamlit.app/?keepalive=${{ github.run_id }}"
        run: |
          node - <<'NODE'
          const { chromium } = require('playwright');
          (async () => {
            const browser = await chromium.launch();
            const page = await browser.newPage();
            await page.goto(process.env.APP_URL, { waitUntil: 'domcontentloaded', timeout: 60000 });

            // If the sleep screen shows a wake button, click it.
            // Try a few common variants Streamlit uses.
            const selectors = [
              'button:has-text("Wake up")',
              'button:has-text("Wake")',
              'button:has-text("Start app")',
              'role=button[name=/wake|start|resume/i]'
            ];
            for (const sel of selectors) {
              const btn = page.locator(sel).first();
              if (await btn.count()) {
                console.log('Found wake button via selector:', sel);
                await btn.click();
                break;
              }
            }

            // Give it a moment to spin up, then ensure the app rendered
            await page.waitForLoadState('domcontentloaded');
            await page.waitForTimeout(30000);

            // Minimal sanity check: look for Streamlit app container
            const ok =
              (await page.locator('div[data-testid="stAppViewContainer"]').count()) > 0 ||
              (await page.locator('div.stApp').count()) > 0 ||
              (await page.locator('main').count()) > 0;

            console.log('Final URL:', page.url());
            if (!ok) {
              throw new Error('App did not render yet (still waking?).');
            }
            await browser.close();
          })().catch(e => { console.error(e.message || e); process.exit(1); });
          NODE
