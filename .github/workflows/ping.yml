name: Keep Streamlit Awake

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes UTC
  workflow_dispatch:

concurrency:
  group: keep-streamlit-awake
  cancel-in-progress: true

jobs:
  wake:
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm init -y
          npm install playwright
          npx playwright install --with-deps chromium

      - name: Wake only if sleeping
        env:
          APP_URL: "https://venkateshbalu.streamlit.app/?keepalive=${{ github.run_id }}"
        run: |
          node - <<'NODE'
          const { chromium } = require('playwright');

          (async () => {
            const browser = await chromium.launch({
              args: ['--no-sandbox', '--disable-dev-shm-usage']
            });
            const page = await browser.newPage();
            page.setDefaultTimeout(30000);

            // Open the app
            await page.goto(process.env.APP_URL, { waitUntil: 'domcontentloaded', timeout: 90000 });

            // State helpers
            const isAwake = async () =>
              (await page.locator('div[data-testid="stAppViewContainer"]').count()) > 0;

            const isSleeping = async () =>
              (await page.locator('button[data-testid="wakeup-button-viewer"]').count()) > 0;

            // Already awake?
            if (await isAwake()) {
              console.log('‚úÖ App already awake. Nothing to do.');
              await browser.close(); process.exit(0);
            }

            // If sleeping, click the wake button
            if (await isSleeping()) {
              console.log('üí§ Sleeping screen detected. Clicking wakeup button‚Ä¶');
              const wakeBtn = page.locator('button[data-testid="wakeup-button-viewer"]').first();
              await wakeBtn.click({ force: true, timeout: 20000 });
            } else {
              console.log('‚ÑπÔ∏è No wakeup button visible; app may be starting. Will just wait.');
            }

            // Give the app time to boot: wait for network to settle and poll for the container
            try { await page.waitForLoadState('networkidle', { timeout: 60000 }); } catch {}
            const deadline = Date.now() + 120000; // up to 2 minutes total
            while (Date.now() < deadline && !(await isAwake())) {
              await page.waitForTimeout(1500);
            }

            if (await isAwake()) {
              console.log('üöÄ App woke successfully.');
            } else {
              console.log('‚ö†Ô∏è App not fully ready yet; will retry on next scheduled run.');
            }

            await browser.close(); process.exit(0);
          })().catch(e => { console.error(e?.stack || e); process.exit(1); });
          NODE
